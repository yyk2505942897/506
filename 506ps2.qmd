---
title: "506PS2"
author: "Yukun Yang"
format: pdf
editor: visual
---

https://github.com/yyk2505942897/506.git

# Problem 1

## (a)

### Version 1

```{r}
# for loop
# num_rolls number of dice to roll
dice <- function(num_rolls) {
  winning <- 0
  
  for (i in 1:num_rolls) {
    #simulate rolling dice
    roll <- sample(1:6, 1)
    
    #win
    if (roll %in% c(2, 4, 6)) {
      winning <- winning + roll
    } 
  }
  winning <- winning - 2 * num_rolls 
  return(winning)
}
```

### Version2

```{r}
#' vectorize
dice_vectorized <- function(num_rolls) {
  #roll in vector
  rolls <- sample(1:6, num_rolls, replace = TRUE)

  winning <- ifelse(rolls %in% c(2, 4, 6), rolls, 0)
  
  # Calculate the total winnings/losses by summing the vector
  total_winning <- sum(winning)
  total_winning <- total_winning - 2*num_rolls
  return(total_winning)
}

```

### Version3

```{r}
#' table
dice_table <- function(num_rolls) {
  
  rolls <- sample(1:6, num_rolls, replace = TRUE)
  
  # Create a table to count the frequency of each roll
  roll_table <- table(rolls)
  
  # Initialize total winnings to 0
  total_winnings <- 0

  # Loop through even numbers (2, 4, 6) in the table and calculate winnings
  for (i in seq(2, 6, by = 2)) {
    if (i %in% names(roll_table)) {
      total_winnings <- total_winnings + (i * roll_table[[as.character(i)]])
    }
  }

  total_winnings <- total_winnings - (2 * num_rolls)
  
  return(total_winnings)
}

```

### Version 4

```{r}
#' apply
dice_apply <- function(num_rolls) {

  rolls <- sample(1:6, num_rolls, replace = TRUE)
  rolls_matrix <- matrix(rolls, nrow = 1)
  
  # Define a function to calculate winnings or losses for a single roll
  calculate_winning <- function(roll) {
    if (roll %in% c(2, 4, 6)) {
      return(roll)
    }
    return (0) 
  }
  
  # apply the calculate_winnings function to each roll using apply
  winning_matrix <- apply(rolls_matrix, 2, calculate_winning)
  
  # Calculate the total winnings by summing the matrix
  total_winning <- sum(winning_matrix)
  total_winning <- total_winning - (2 * num_rolls)
  
  return(total_winning)
}

```

## (b)

The expected value should be 0 and for four versions, they don't deviate a lot from 0 when the input is 3000 or 30000, so I believe all versions work.

```{r}
dice(3)
dice(3000)
dice(30000) 
dice_vectorized(3)
dice_vectorized(3000)
dice_vectorized(30000)
dice_table(3)
dice_table(3000)
dice_table(30000)
dice_apply(3)
dice_apply(3000)
dice_apply(30000)
```

## (c)

"\[1\]"Version 1 (3 rolls): -6" \[1\] "Version 2 (3 rolls): -6" \[1\] "Version 3 (3 rolls): -6" \[1\] "Version 4 (3 rolls): -6" \[1\] "Version 1 (3 rolls): 82" \[1\] "Version 2 (3 rolls): 82" \[1\] "Version 3 (3 rolls): 82" \[1\] "Version 4 (3 rolls): 82"

We can see that all versions give the same result by using same seed.

```{r}
set.seed(506)
num <- 3
print(paste("Version 1 (3 rolls):", dice(num)))
set.seed(506)

print(paste("Version 2 (3 rolls):", dice_vectorized(num)))
set.seed(506)

print(paste("Version 3 (3 rolls):", dice_table(num)))
set.seed(506)

print(paste("Version 4 (3 rolls):", dice_apply(num)))

set.seed(506)
num <- 3000
print(paste("Version 1 (3 rolls):", dice(num)))
set.seed(506)

print(paste("Version 2 (3 rolls):", dice_vectorized(num)))
set.seed(506)

print(paste("Version 3 (3 rolls):", dice_table(num)))
set.seed(506)

print(paste("Version 4 (3 rolls):", dice_apply(num)))
```

## (d)

From the result, we can find that Version 2, which is the vectorized function has the minimum mean run time. Table is the second fastest and then is apply() and for loop. The main reason is that for loop requires interpretation each time and keep updating the variables inside the loop.

```{r}

library(microbenchmark)

set.seed(506)

low_input <- 100
large_input <- 10000

results_low <- microbenchmark(
  "V1(low)" = dice(low_input),
  "V2(low)" = dice_vectorized(low_input),
  "V3(low)" = dice_table(low_input),
  "V4(low)" = dice_apply(low_input),
  times = 1000  
)

results_large <- microbenchmark(
  "V1(large)" = dice(large_input),
  "V2(large)" = dice_vectorized(large_input),
  "V3(large)" = dice_table(large_input),
  "V4(large)" = dice_apply(large_input),
  times = 1000 
)

print(results_low)
print(results_large)

```

## (e)

The mean winning for 10000 replication is almost equal to 0, so we can say that this game is fair

```{r}
#' num_rolls number of rolling
#' num_trials number of Monte Carlo replications
simulate <- function(num_rolls, mcrep) {
  total_winning <- numeric(mrep)
  
  for (i in 1:mrep) {
    result <- dice_vectorized(num_rolls)
    total_winning[i] <- result
  }
  
  return(total_winning)
}

# Set the number of replications and rolls per trial
mrep <- 10000
num_rolls <- 10

# Run the simulation
winning <- simulate(num_rolls, mrep)

# Calculate the mean winnings over all trials
mean_w <- mean(winning)

# Print the mean winnings
cat("Mean winnings over", mrep, "trials with", num_rolls, "rolls each:", mean_w, "\n")

```

# Problem 2

## (a)

```{r}
data <- read.csv("C:/users/Yukun/Downloads/cars.csv")
colnames(data) <- c('Height','Length','Width','Driveline', 'Engine_Type',
                    'Hybrid', 'Number_of_Forward_Gears', 'Transmission',
                    'City_mpg','Fuel_Type', 'Highway_mpg','Classification',
                    'ID','Make','Model_Year','Year','Horsepower','Torque')

```

## (b)

```{r}
Gl <- subset(data, Fuel_Type == 'Gasoline')

```

## (c)

The coefficient of Horsepower is 0.016, with p-value equals to 7.96e-13. Therefore, we can say that one unit increase in Horsepower will increase the highway_mpg by 0.016, holding other variables to be constant, which includes torque, three dimensions and the year car was released.

```{r}
mod <- lm(Highway_mpg ~Horsepower + Torque + Height + Length + Width + 
            as.factor(Year), data = Gl)
summary(mod)
```

## (d)

```{r}
#use interaction_plot
library(interactions)
mod2 <- lm(Highway_mpg ~Horsepower * Torque + Height + Length + Width + 
            as.factor(Year), data = Gl)
#Create a name list for 'Year'
y <- list(2010)
names(y) <- 'Year'
interact_plot(model = mod2, pred = Horsepower, modx = Torque, at= y,data = Gl) 
summary(mod2)
```

## (e)

The result is same with (d)

```{r}

#Create a design matrix X
X <- model.matrix(Highway_mpg ~ Horsepower * Torque + Length + Width + Height + as.factor(Year), data = Gl)

# Create the response vector(y)
y <- Gl$Highway_mpg

# beta = (x'x)^(-1)x'y
beta <- solve(t(X) %*% X) %*% t(X) %*% y

beta

```

# Problem 3

```         
import delimited "C:\Users\Yukun\Downloads\cars.csv", clear

//a Here, I use ds to get the column names
ds
rename dimensions~t height
rename dimensio~dth width 
rename dimensio~gth length
rename engineinf~pe type
rename engineinf~rd forward_gears
rename fuelin~tympg city_mpg
rename fuelin~aympg highway_mpg
rename identifica~d id
rename identi~lyear model_year
rename engineinfo~c horsepower
rename engineinf~ne driveline
rename engineinf~id hybrid
rename engineinfo~n transmission
rename fuelinform~e fuel_type
rename identifica~n classification
rename identifica~e make
rename identi~nyear year
rename v18 torque

//b
drop if fuel_type!= "Gasoline"

//c The result is same with that in R
regress highway_mpg horsepower torque length width height i.year

//d The result is same with that in R
regress highway_mpg c.horsepower##c.torque i.year length width height

summarize torque, d 
summarize horsepower, d //get the percentile of variables

//then use 1st, 2nd, 3rd quantile to graph interaction plot
margins , at( horsepower = (185,263,317) torque = (177,257,332))
marginsplot, xdimension(horsepower)

/*e
//create design_matrix
mkmat horsepower torque length width height year, matrix(design_matrix)

matrix y = highway_mpg
mat XtX = design_matrix' * design_matrix
mat XtY = design_matrix' * y
mat beta = inv(XtX) * XtY
*/

clear
```

### (c)

```         
      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

### (d)

```         

---------------------------------------------------------------------------------------
          highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
                 year |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------
```

![](images/Graph.jpg)
